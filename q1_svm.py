# -*- coding: utf-8 -*-
"""q1_svm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18tzMaB9-X7AlioifPoOJz5zMchpFwHQ-
"""

!wget https://archive.ics.uci.edu/ml/machine-learning-databases/connect-4/connect-4.data.Z
!uncompress connect-4.data.Z


import urllib.request
import pandas as pd
import gzip
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
from sklearn.svm import SVC
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import MinMaxScaler
#from sklearn.datasets import fetch_openml


# Define mapping for 'b', 'o', and 'x'
mapping = {'b': 0, 'o': 1, 'x': 2}

# Read dataset and replace values with integers
df = pd.read_csv('connect-4.data', header=None)
df.replace(mapping, inplace=True)

# Define mapping for 'won', 'loss', and 'draw'
outcome_mapping = {'win': 1, 'loss': 0, 'draw': 2}

# Replace outcome values with integers
df.replace(outcome_mapping, inplace=True)


#df = pd.read_csv('connect-4.data', header=None)


# Separate the target variable from the rest of the data
X = df.iloc[:, :-1]
y = df.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)

svm_model = SVC()
svm_model.fit(X_train,y_train)
y_pred = svm_model.predict(X_test)
print('Accuracy:', accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='macro'))
print("Recall:", recall_score(y_test, y_pred, average='macro'))
print("F1-score:", f1_score(y_test, y_pred, average='macro'))
print("Confusion matrix:\n", confusion_matrix(y_test, y_pred))


scores = cross_val_score(svm_model, X_train, y_train, cv=5)
print(f"Accuracy_cross: {scores.mean():.2f} +/- {scores.std():.2f}")


"""
param_grid = {'C': [0.1, 1, 10],
              'kernel': ['linear', 'rbf', 'sigmoid'],
              'gamma': [0.01, 0.1, 1]}
svm_grid = GridSearchCV(svm_model, param_grid, cv=5, n_jobs=-1)
svm_grid.fit(X_train, y_train)
print('Best parameters:', svm_grid.best_params_)
y_pred = svm_grid.predict(X_test)
print('Accuracy_grid:', accuracy_score(y_test, y_pred))
svmg=svm_grid.best_estimator_
y_pred =svmg.predict(X_test)
print('Accuracy_grid_best:', accuracy_score(y_test, y_pred))
"""
param_dist = {'C': [0.1, 1, 10],
              'kernel': ['linear', 'rbf'],
              'gamma': [0.01, 0.1, 1]}
svm_random = RandomizedSearchCV(svm_model, param_dist, cv=5, n_jobs=-1)
svm_random.fit(X_train, y_train)
print('Best parameters:', svm_random.best_params_)
y_pred = svm_random.predict(X_test)
print('Accuracy_random:', accuracy_score(y_test, y_pred))
svmr=svm_random.best_estimator_
y_pred =svmr.predict(X_test)
print('Accuracy_random_best:', accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred, average='macro'))
print("Recall:", recall_score(y_test, y_pred, average='macro'))
print("F1-score:", f1_score(y_test, y_pred, average='macro'))
print("Confusion matrix:\n", confusion_matrix(y_test, y_pred))